@using Microsoft.EntityFrameworkCore

@typeparam DataType


@if (FilterableColumns.Any())
{
    <div class="container">
        <div class="row">
            @{
                int columnGridSize = 6;
                if (FilterableColumns.Count() >= 3)
                    columnGridSize = 4;
            }
            @foreach (var column in FilterableColumns)
            {
                <div class="col-md-@columnGridSize">
                    <div class="input-group input-group-sm mb-3">
                        @switch (column.FilterType)
                        {
                            case FilterTypes.DoubleNumber:
                            case FilterTypes.IntNumber:
                                var step = column.FilterType == FilterTypes.DoubleNumber ? "any" : "1";
                                <span class="input-group-text" id="inputGroup-sizing-sm">@column.PropertyName</span>
                                <input type="number" step="@step" class="form-control" placeholder="from" @bind="@column.FilterNumberFrom">
                                <input type="number" step="@step" class="form-control" placeholder="to" @bind="@column.FilterNumberTo">
                                break;

                            case FilterTypes.String:
                                <span class="input-group-text" id="inputGroup-sizing-sm">@column.PropertyName</span>
                                <input type="text" class="form-control" aria-label="Please Enter @column.PropertyName" @bind="@column.FilterString" aria-describedby="inputGroup-sizing-sm">
                                break;

                            case FilterTypes.DateOnly:
                                <span class="input-group-text" id="inputGroup-sizing-sm">@column.PropertyName</span>
                                <input type="date" class="form-control" placeholder="from" @bind="@column.FilterDateFrom">
                                <input type="date" class="form-control" placeholder="to" @bind="@column.FilterDateTo">
                                break;

                            case FilterTypes.TimeOnly:
                                <span class="input-group-text" id="inputGroup-sizing-sm">@column.PropertyName</span>
                                <input type="time" class="form-control" placeholder="from" @bind="@column.FilterTimeFrom">
                                <input type="tme" class="form-control" placeholder="to" @bind="@column.FilterTimeTo">
                                break;

                            case FilterTypes.DateTime:
                                <span class="input-group-text" id="inputGroup-sizing-sm">@column.PropertyName</span>
                                <input type="datetime-local" class="form-control" placeholder="from" @bind="@column.FilterDateTimeFrom">
                                <input type="datetime-local" class="form-control" placeholder="to" @bind="@column.FilterDateTimeTo">
                                break;

                            case FilterTypes.Bool:
                                <span class="input-group-text" id="inputGroup-sizing-sm">@column.PropertyName</span>
                                <select type="text" class="form-control" aria-label="Please Enter @column.PropertyName" @bind="@column.Filter" aria-describedby="inputGroup-sizing-sm">
                                    <option value="">None</option>
                                    <option value="@bool.TrueString">True</option>
                                    <option value="@bool.FalseString">False</option>
                                </select>
                                break;

                            case FilterTypes.Enum:
                                var values = Enum.GetValues(column.PropertyType);
                                <span class="input-group-text" id="inputGroup-sizing-sm">@column.PropertyName</span>
                                <select type="text" class="form-control" @bind="column.FilterString" aria-label="Please Enter @column.PropertyName" aria-describedby="inputGroup-sizing-sm">
                                    <option value="">None</option>
                                    @foreach (var v in values)
                                    {
                                        <option value="@v">@v</option>
                                    }
                                </select>
                                break;
                        }
                    </div>
                </div>
            }
        </div>

        <div class="row">
            <div class="col-md-12">
                <div style="text-align:right; padding-top: 15px;padding-bottom: 15px;">
                    <button class="btn btn-secondary" @onclick="FilterClearClicked">Clear</button>
                    <button class="btn btn-primary" @onclick="FilterClicked">Filter</button>
                </div>
            </div>
        </div>
    </div>
}

<table class="@Class">

    <thead>
        <tr>
            <CascadingValue Value="this" Name="Table">
                @ChildContent
            </CascadingValue>
        </tr>
    </thead>

    <tbody>

        @if (items.Any())
        {
            foreach (var item in items)
            {
                <tr>
                    @foreach (var column in columns)
                    {
                        <td>
                            @if (column.Template is null)
                            {
                                var prop = column.CompiledProperty;
                                var value = prop(item);
                                @value
                            }
                            else
                            {
                                var fragment = column.Template(item);
                                @fragment
                            }
                        </td>

                    }
                </tr>
            }
        }
        else
        {

        }
    </tbody>
</table>

<nav>
    <ul class="pagination">
        <li class="page-item @(FirstPageEnabled ? "" : "disabled")" @onclick="FirstPageClicked">
            <a class="page-link" href="#" onclick="return false">
                <span aria-hidden="true">&laquo;</span>
            </a>
        </li>

        <li class="page-item @(PrevPageEnabled ? "" : "disabled")" @onclick="PrevPageClicked">
            <a class="page-link" href="#" onclick="return false">
                <span aria-hidden="true">&lsaquo;</span>
            </a>
        </li>
        @for (var i = pageSelectStart; i <= pageSelectEnd; i++)
        {
            var pn = i;
            var active = i - 1 == pageIndex ? "active" : "";
            <li class="page-item @active" @onclick="() => SetPageIndex(pn-1)">
                <a class="page-link" href="#" onclick="return false">@pn</a>
            </li>
        }
        <li class="page-item @(NextPageEnabled ? "" : "disabled")" @onclick="NextPageClicked">
            <a class="page-link" href="#" onclick="return false">
                <span aria-hidden="true">&rsaquo;</span>
            </a>
        </li>
        <li class="page-item @(LastPageEnabled ? "" : "disabled")" @onclick="LastPageClicked">
            <a class="page-link" href="#" onclick="return false">
                <span aria-hidden="true">&raquo;</span>
            </a>
        </li>
    </ul>
</nav>

<p>@itemsCount</p>